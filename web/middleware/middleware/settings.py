"""
Django settings for middleware project.

Generated by 'django-admin startproject' using Django 1.11.14.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from datetime import timedelta
from boto3.session import Session
import logging

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']

ALLOWED_HOSTS = ['*', ]


# Application definition
# APPS
# ------------------------------------------------------------------------------
THEME_APPS = [
]
DJANGO_APPS = [
    "django.contrib.admin",
    #"django.contrib.admin.apps.SimpleAdminConfig",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 'django.contrib.humanize', # Handy template tags
]
THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_swagger",
    "django_celery_beat",
    "django_celery_monitor",
    "django_celery_results",
    "django_extensions",
    "bootstrap",
    "django_ses",
    "corsheaders",
]
LOCAL_APPS = [
    "ngip.apps.NgipConfig",
]
# https://docs.djangoproject.com/en/dev/ref/settings/#installed-apps
INSTALLED_APPS = THEME_APPS + DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "middleware.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "middleware.wsgi.application"


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases


# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Singapore'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = "/static/"


# ngip customization
AUTH_USER_MODEL = "ngip.User"

# https://www.capside.com/labs/deploying-full-django-stack-with-docker-compose/
# using environment variable to pass in DB detail, making it easier to manage dev and prod
if 'DJANGO_DEBUG' in os.environ:
    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = os.environ['DJANGO_DEBUG'].upper() == 'TRUE'

PRODUCTION = False
# local = local debug
ENVIRONMENT = 'local'
if 'ENVIRONMENT' in os.environ:
    PRODUCTION = os.environ['ENVIRONMENT'].lower() == 'prod'


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ['POSTGRES_HOST'],
        'PORT': os.environ['POSTGRES_PORT'],
        'NAME': os.environ['POSTGRES_DB'],
        'USER': os.environ['POSTGRES_USER'],
        'PASSWORD': os.environ['POSTGRES_PASSWORD']
    }
}

if ENVIRONMENT == 'local':
    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True
    #STATICFILES_DIRS = ((os.path.join(BASE_DIR, 'static')),)
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    # STATIC_ROOT = '/static'
    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.sqlite3',
    #         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    #     }
    # }
else:
    # Running the Docker image
    STATICFILES_DIRS = ((os.path.join(BASE_DIR, 'static')),)
    STATIC_ROOT = '/code/data/static'

CELERY_BROKER_URL = f'redis://{os.environ["REDIS_HOST"]}:{os.environ["REDIS_PORT"]}/0'
# CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_RESULT_EXPIRES = timedelta(days=14)
CELERY_MONITOR_TASK_SUCCESS_EXPIRES = timedelta(days=14)
CELERY_MONITOR_TASK_ERROR_EXPIRES = timedelta(days=14)
CELERY_MONITOR_TASK_PENDING_EXPIRES = timedelta(days=14)

# TODO: CELERY_ALWAYS_EAGER - set during unittest

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": CELERY_BROKER_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

CORS_ORIGIN_ALLOW_ALL = True
# CORS_ORIGIN_WHITELIST = (
#     'google.com',
#     'hostname.example.com'
# )

MAIL_SENDER = 'AMAZON'
AWS_REGION_NAME = os.environ["AWS_DEFAULT_REGION"]
AWS_ACCESS_KEY_ID = AWS_SES_ACCESS_KEY_ID = os.environ["AWS_NGIP_ACCESS_KEY_ID"]
AWS_SECRET_ACCESS_KEY = AWS_SES_SECRET_ACCESS_KEY = os.environ["AWS_NGIP_SECRET_ACCESS_KEY"]
boto3_session = Session(aws_access_key_id=AWS_ACCESS_KEY_ID,
                        aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
                        region_name=AWS_REGION_NAME)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # 'root': {
    #     'level': logging.INFO,
    #     'handlers': ['console'],
    # },
    'formatters': {
        'simple': {
            'format': u"%(asctime)s [%(levelname)-8s-%(module)s] %(message)s",
            'datefmt': "%Y-%m-%d %H:%M:%S"
        },
        'aws': {
            'format': u"[%(levelname)-8s] %(module)s %(message)s",
            'datefmt': "%Y-%m-%d %H:%M:%S"
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'cwlog-general': {
            'level': 'INFO',
            'class': 'watchtower.CloudWatchLogHandler',
            'boto3_session': boto3_session,
            'log_group': f'ngip-{ENVIRONMENT}-middleware',
            'stream_name': 'general',
            'formatter': 'aws',
        },
        'cwlog-tasks': {
            'level': 'INFO',
            'class': 'watchtower.CloudWatchLogHandler',
            'boto3_session': boto3_session,
            'log_group': f'ngip-{ENVIRONMENT}-middleware',
            'stream_name': 'tasks',
            'formatter': 'aws',
        },
        'cwlog-error': {
            'level': 'INFO',
            'class': 'watchtower.CloudWatchLogHandler',
            'boto3_session': boto3_session,
            'log_group': f'ngip-{ENVIRONMENT}-middleware',
            'stream_name': 'error',
            'formatter': 'aws',
        },
    },
    'loggers': {
        'django': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'handlers': ['console', 'cwlog-general'],
            'propagate': True,
        },
        'tasks': {
            'level': 'INFO',
            'handlers': ['console', 'cwlog-general', 'cwlog-tasks'],
            'propagate': True,
        },
        'ngip.error': {
            'level': 'ERROR',
            'handlers': ['console', 'cwlog-general', 'cwlog-error'],
            'propagate': False,
        },
        # add your other loggers here...
    },
}


ADMINS = [(os.environ["ADMIN_NAME"], os.environ["ADMIN_EMAIL"])]
